kernel/fs.c:112:// not stored on disk: ip->ref and ip->valid.
kernel/fs.c:123://   is free if ip->ref is zero. Otherwise ip->ref tracks
kernel/fs.c:130://   cache entry is only correct when ip->valid is 1.
kernel/fs.c:132://   the disk and sets ip->valid, while iput() clears
kernel/fs.c:133://   ip->valid if ip->ref has fallen to zero.
kernel/fs.c:142://   ... examine and modify ip->xxx ...
kernel/fs.c:150:// pathname lookup. iget() increments ip->ref so that the inode
kernel/fs.c:158:// entries. Since ip->ref indicates whether an entry is free,
kernel/fs.c:159:// and ip->dev and ip->inum indicate which i-node an entry
kernel/fs.c:162:// An ip->lock sleep-lock protects all ip-> fields other than ref,
kernel/fs.c:163:// dev, and inum.  One must hold ip->lock in order to
kernel/fs.c:164:// read or write that inode's ip->valid, ip->size, ip->type, &c.
kernel/fs.c:203:		if(dip->type == 0){  // a free inode
kernel/fs.c:205:			dip->type = type;
kernel/fs.c:216:// Must be called after every change to an ip->xxx field
kernel/fs.c:218:// Caller must hold ip->lock.
kernel/fs.c:225:	bp = bread(ip->dev, IBLOCK(ip->inum, sb));
kernel/fs.c:226:	dip = (struct dinode*)bp->data + ip->inum%IPB;
kernel/fs.c:227:	dip->type = ip->type;
kernel/fs.c:228:	dip->major = ip->major;
kernel/fs.c:229:	dip->minor = ip->minor;
kernel/fs.c:230:	dip->nlink = ip->nlink;
kernel/fs.c:231:	dip->size = ip->size;
kernel/fs.c:232:	memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
kernel/fs.c:250:		if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
kernel/fs.c:251:			ip->ref++;
kernel/fs.c:255:		if(empty == 0 && ip->ref == 0)    // Remember empty slot.
kernel/fs.c:264:	ip->dev = dev;
kernel/fs.c:265:	ip->inum = inum;
kernel/fs.c:266:	ip->ref = 1;
kernel/fs.c:267:	ip->valid = 0;
kernel/fs.c:279:	ip->ref++;
kernel/fs.c:292:	if(ip == 0 || ip->ref < 1)
kernel/fs.c:295:	acquiresleep(&ip->lock);
kernel/fs.c:297:	if(ip->valid == 0){
kernel/fs.c:298:		bp = bread(ip->dev, IBLOCK(ip->inum, sb));
kernel/fs.c:299:		dip = (struct dinode*)bp->data + ip->inum%IPB;
kernel/fs.c:300:		ip->type = dip->type;
kernel/fs.c:301:		ip->major = dip->major;
kernel/fs.c:302:		ip->minor = dip->minor;
kernel/fs.c:303:		ip->nlink = dip->nlink;
kernel/fs.c:304:		ip->size = dip->size;
kernel/fs.c:305:		memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
kernel/fs.c:307:		ip->valid = 1;
kernel/fs.c:308:		if(ip->type == 0)
kernel/fs.c:317:	if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
kernel/fs.c:320:	releasesleep(&ip->lock);
kernel/fs.c:333:	acquiresleep(&ip->lock);
kernel/fs.c:334:	if(ip->valid && ip->nlink == 0){
kernel/fs.c:336:		int r = ip->ref;
kernel/fs.c:341:			ip->type = 0;
kernel/fs.c:343:			ip->valid = 0;
kernel/fs.c:346:	releasesleep(&ip->lock);
kernel/fs.c:349:	ip->ref--;
kernel/fs.c:365:// are listed in ip->addrs[].  The next NINDIRECT blocks are
kernel/fs.c:366:// listed in block ip->addrs[NDIRECT].
kernel/fs.c:377:		if((addr = ip->addrs[bn]) == 0)
kernel/fs.c:378:			ip->addrs[bn] = addr = balloc(ip->dev); //balloc alocira slobodandeo na disku, vratice nam njegov redni broj
kernel/fs.c:385:		if((addr = ip->addrs[NDIRECT]) == 0)
kernel/fs.c:386:			ip->addrs[NDIRECT] = addr = balloc(ip->dev);
kernel/fs.c:387:		bp = bread(ip->dev, addr);//bread cita sa diska blok
kernel/fs.c:390:			a[bn] = addr = balloc(ip->dev);
kernel/fs.c:413:		if(ip->addrs[i]){
kernel/fs.c:414:			bfree(ip->dev, ip->addrs[i]);
kernel/fs.c:415:			//ip->addrs[i] = 0; // da bi ostao inode kakav je bio(sadrzaj)
kernel/fs.c:419:	if(ip->addrs[NDIRECT]){
kernel/fs.c:420:		bp = bread(ip->dev, ip->addrs[NDIRECT]);
kernel/fs.c:424:				bfree(ip->dev, a[j]);
kernel/fs.c:427:		bfree(ip->dev, ip->addrs[NDIRECT]);
kernel/fs.c:428:		//ip->addrs[NDIRECT] = 0; // da bi ostao inode kakv je bio (sadrzaj)
kernel/fs.c:431:	//ip->size = 0; // *
kernel/fs.c:436:// Caller must hold ip->lock.
kernel/fs.c:440:	st->dev = ip->dev;
kernel/fs.c:441:	st->ino = ip->inum;
kernel/fs.c:442:	st->type = ip->type;
kernel/fs.c:443:	st->nlink = ip->nlink;
kernel/fs.c:444:	st->size = ip->size;
kernel/fs.c:448:// Caller must hold ip->lock.
kernel/fs.c:455:	if(ip->type == T_DEV){
kernel/fs.c:456:		if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
kernel/fs.c:458:		return devsw[ip->major].read(ip, dst, n);
kernel/fs.c:461:	if(off > ip->size || off + n < off)
kernel/fs.c:463:	if(off + n > ip->size)
kernel/fs.c:464:		n = ip->size - off;
kernel/fs.c:467:		bp = bread(ip->dev, bmap(ip, off/BSIZE));
kernel/fs.c:476:// Caller must hold ip->lock.
kernel/fs.c:484:	if(ip->type == T_DEV){
kernel/fs.c:485:		if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
kernel/fs.c:487:		return devsw[ip->major].write(ip, src, n);
kernel/fs.c:490:	if(off > ip->size || off + n < off)
kernel/fs.c:496:		bp = bread(ip->dev, bmap(ip, off/BSIZE));
kernel/fs.c:503:	if(n > 0 && off > ip->size){
kernel/fs.c:504:		ip->size = off;
kernel/fs.c:638:		if(ip->type != T_DIR){
kernel/sysfile.c:167:	if(ip->type == T_DIR){
kernel/sysfile.c:173:	ip->nlink++;
kernel/sysfile.c:180:	if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
kernel/sysfile.c:193:	ip->nlink--;
kernel/sysfile.c:243:	if(ip->nlink < 1)
kernel/sysfile.c:245:	if(ip->type == T_DIR && !isdirempty(ip)){
kernel/sysfile.c:251:	ip->type = FD_NONE; //za inode promenu
kernel/sysfile.c:253:	//de.inum = ip->inum; //za lsdel
kernel/sysfile.c:260:	if(ip->type == T_DIR){
kernel/sysfile.c:266:	ip->nlink--;
kernel/sysfile.c:293:		if(type == T_FILE && ip->type == T_FILE)
kernel/sysfile.c:303:	ip->major = major;
kernel/sysfile.c:304:	ip->minor = minor;
kernel/sysfile.c:305:	ip->nlink = 1;
kernel/sysfile.c:311:		// No ip->nlink++ for ".": avoid cyclic ref count.
kernel/sysfile.c:312:		if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
kernel/sysfile.c:316:	if(dirlink(dp, name, ip->inum) < 0)
kernel/sysfile.c:349:		if(ip->type == T_DIR && omode != O_RDONLY){
kernel/sysfile.c:424:	if(ip->type != T_DIR){
kernel/file.c:105:	if(f->type == FD_INODE){ //dodao || posle || f->ip->type == 0
Binary file .git/objects/pack/pack-a8564a04fb6c47f34b701340cd800627698a79db.pack matches
